def sum_inverse_squares_truncated():
    sum_fwd = 0
    for i in range(1, 11):
        term = 1 / i**2
        term = int(term * 1000) / 1000  # Truncamiento a 3 dígitos
        sum_fwd += term
        sum_fwd = int(sum_fwd * 1000) / 1000  # Truncamiento a 3 dígitos
    return sum_fwd

sum_fwd = sum_inverse_squares_truncated()
sum_fwd
def sum_inverse_squares_truncated_rev():
    sum_rev = 0
    for i in range(10, 0, -1):
        term = 1 / i**2
        term = int(term * 1000) / 1000  # Truncamiento a 3 dígitos
        sum_rev += term
        sum_rev = int(sum_rev * 1000) / 1000  # Truncamiento a 3 dígitos
    return sum_rev

sum_rev = sum_inverse_squares_truncated_rev()
sum_rev

import math

def maclaurin_arctan(x, n):
    sum_ = 0
    for i in range(1, n + 1):
        term = (-1)**(i + 1) * x**(2*i - 1) / (2*i - 1)
        sum_ += term
    return sum_

n = 1
while True:
    approx_pi = 4 * maclaurin_arctan(1, n)
    if abs(approx_pi - math.pi) < 1e-3:
        break
    n += 1

n

def maclaurin_arctan_modified(x, n):
    sum_ = 0
    for i in range(1, n + 1):
        term = (-1)**(i + 1) * x**(2*i - 1) / (2*i - 1)
        sum_ += term
    return sum_

n = 1
while True:
    approx_pi = 4 * (4 * maclaurin_arctan_modified(1/5, n) - maclaurin_arctan_modified(1/239, n))
    if abs(approx_pi - math.pi) < 1e-3:
        break
    n += 1

n
import math

def maclaurin_e(n):
    sum_ = 0
    for i in range(n + 1):
        sum_ += 1 / math.factorial(i)
    return sum_

n = 0
while True:
    approx_e = maclaurin_e(n)
    if abs(approx_e - math.e) < 1e-6:
        break
    n += 1

n, approx_e

def maclaurin_sin(x, n):
    sum_ = 0
    for i in range(n + 1):
        term = (-1)**i * x**(2*i + 1) / math.factorial(2*i + 1)
        sum_ += term
    return sum_

x = 1
n = 0def sin_recursive(x, h):
    current_x = 0
    current_sin = 0
    while current_x < x:
        current_sin = current_sin + 2 * math.cos((current_x + h) / 2) * math.sin(h / 2)
        current_x += h
    return current_sin

h = 0.01
approx_sin_1_recursive = sin_recursive(1, h)
approx_sin_1_recursive

while True:
    approx_sin = maclaurin_sin(x, n)
    if abs(approx_sin - math.sin(x)) < 1e-6:
        break
    n += 1

n, approx_sin

def maclaurin_cos(x, n):
    sum_ = 0
    for i in range(n + 1):
        term = (-1)**i * x**(2*i) / math.factorial(2*i)
        sum_ += term
    return sum_

x = 1
n = 0
while True:
    approx_cos = maclaurin_cos(x, n)
    if abs(approx_cos - math.cos(x)) < 1e-6:
        break
    n += 1

n, approx_cos

def cos_recursive(x, h):
    current_x = 0
    current_cos = 1
    while current_x < x:
        current_cos = current_cos - 2 * math.sin((current_x + h) / 2) * math.sin(h / 2)
        current_x += h
    return current_cos

approx_cos_1_recursive = cos_recursive(1, h)
approx_cos_1_recursive

def cos_recursive(x, h):
    current_x = 0
    current_cos = 1
    while current_x < x:
        current_cos = current_cos - 2 * math.sin((current_x + h) / 2) * math.sin(h / 2)
        current_x += h
    return current_cos

approx_cos_1_recursive = cos_recursive(1, h)
approx_cos_1_recursive

def f(x):
    return x**3 - x - 1

def df(x):
    return 3*x**2 - 1



